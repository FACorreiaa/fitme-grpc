volumes:
  postgres-data:
services:
#  init:
#    image: &tempoImage grafana/tempo:latest
#    user: root
#    entrypoint:
#      - "chown"
#      - "10001:10001"
#      - "/var/tempo"
#    volumes:
#      - ./tempo-data:/var/tempo
#
#  app:
#    platform: linux/amd64
#    container_name: fitme-dev
#    build:
#      dockerfile: Dockerfile
#      context: .
#      target: dev
#    volumes:
#      - .:/app
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#      - "40000:40000"
#    environment:
#      #- OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=otel-collector:4317
#      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=tempo:4317
#
#    depends_on:
#      - postgres
#      - redis
#    logging:
#      driver: loki
#      options:
#        loki-url: http://localhost:3100/loki/api/v1/push
#    networks:
#      fit-me:

  postgres:
    env_file:
      - .env
    container_name: postgres
    hostname: ${POSTGRES_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5440:5432"
    restart: on-failure
    volumes:
      #- ./.data/docker-postgres:/var/lib/postgresql/data
      - postgres-data:/var/lib/postgresql/data

    networks:
      - fit-me
  redis:
    env_file:
      - .env
    container_name: redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6388
    ports:
      - "6388:6388"
    expose:
      - "6388"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - fit-me
#  tempo:
#    container_name: tempo
#    image: *tempoImage
#    command: [ "-config.file=/etc/tempo.yaml" ]
#    volumes:
#      - ./config/docker/tempo.yaml:/etc/tempo.yaml
#      - ./tempo-data:/var/tempo
#    ports:
#      - "3200:3200"  # Tempo API
#      #- "9411:9411"  # Zipkin
#      # - "4317:4317"  # OTLP
#    restart: unless-stopped
#    depends_on:
#      - init
#    networks:
#      fit-me:
#
#
#  jaeger:
#    image: jaegertracing/all-in-one:1.46
#    container_name: jaeger
#    environment:
#      COLLECTOR_ZIPKIN_HTTP_PORT: 9411  # Enable Zipkin endpoint
#    ports:
#      - "16686:16686"  # Jaeger UI
#      - "14268:14268"  # Jaeger HTTP ingestion
#      - "14250:14250"  # OTLP gRPC ingestion
#      # - "9411:9411"    # Zipkin HTTP ingestion
#    networks:
#      - fit-me
#
#  # And put them in an OTEL collector pipeline...
#  otel-collector:
#    image: otel/opentelemetry-collector:0.86.0
#    container_name: otel-collector
#    command: [ "--config=/etc/otel-collector.yaml" ]
#    volumes:
#      - ./config/docker/otel-collector.yaml:/etc/otel-collector.yaml
#    ports:
#      - "4317:4317"  # OTLP gRPC
#      - "4318:4318"  # OTLP HTTP
#      - "9464:9464"  # Prometheus metrics
#    networks:
#      fit-me:
#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:latest
#    command:
#      - --config.file=/etc/prometheus.yml
#      - --web.enable-remote-write-receiver
#      - --enable-feature=exemplar-storage
#      - --enable-feature=native-histograms
#    volumes:
#      - ./config/docker/prometheus.yml:/etc/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      fit-me:
#  grafana:
#    container_name: grafana
#    image: grafana/grafana:11.0.0
#    volumes:
#      - ./config/docker/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
#    depends_on:
#      - prometheus
#      - loki
#      - tempo
#    ports:
#      - "3000:3000"
#    networks:
#      fit-me:
#  loki:
#    container_name: loki
#    image: grafana/loki:main
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./config/docker/loki-config.yaml:/etc/loki/local-config.yaml
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - fit-me
networks:
  fit-me:
