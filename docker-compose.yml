services:
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  app:
    platform: linux/amd64
    container_name: fitme-dev
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - .:/app
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://tempo:4318/v1/traces
    depends_on:
      - postgres
      - redis
      - otel-collector
      - prometheus
    logging:
      driver: loki
      options:
        loki-url: http://localhost:3100/loki/api/v1/push
    networks:
      fit-me:
  postgres:
    env_file:
      - .env
    container_name: postgres
    hostname: ${DB_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5440:5432"
    restart: on-failure
    volumes:
      - ./.data/docker-postgres:/var/lib/postgresql/data
    networks:
      - fit-me
  redis:
    env_file:
      - .env
    container_name: redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6388
    ports:
      - "6388:6388"
    expose:
      - "6388"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - fit-me
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    depends_on:
      - init
    networks:
      fit-me:

  # Generate fake traces...
  k6-tracing:
    image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
    environment:
      - ENDPOINT=otel-collector:4317
    restart: always
    depends_on:
      - otel-collector
    networks:
      fit-me:

  # And put them in an OTEL collector pipeline...
  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./config/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "1888:1888"
      - "55679:55679"
    networks:
      fit-me:

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./config/prometheus.yml:/etc/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      fit-me:

  grafana:
    image: grafana/grafana:11.0.0
    volumes:
      - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      fit-me:

networks:
  fit-me:
