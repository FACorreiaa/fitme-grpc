volumes:
  postgres-data:
services:
#  init:
#    image: &tempoImage grafana/tempo:latest
#    user: root
#    entrypoint:
#      - "chown"
#      - "10001:10001"
#      - "/var/tempo"
#    volumes:
#      - ./tempo-data:/var/tempo
#
#  app:
#    platform: linux/amd64
#    container_name: fitme-dev
#    build:
#      dockerfile: Dockerfile
#      context: .
#      target: dev
#    volumes:
#      - .:/app
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#    environment:
#      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=otel-collector:4317
#      #- OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=tempo:4317
#    depends_on:
#      - postgres
#      - redis
#      - otel-collector
#    logging:
#      driver: loki
#      options:
#        loki-url: http://localhost:3100/loki/api/v1/push
#    networks:
#      fit-me:

  postgres:
    env_file:
      - .env
    container_name: postgres
    hostname: ${POSTGRES_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5440:5432"
    restart: on-failure
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./.data/docker-postgres:/var/lib/postgres/data

    networks:
      - fit-me
  redis:
    env_file:
      - .env
    container_name: redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6388
    ports:
      - "6388:6388"
    expose:
      - "6388"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - fit-me

#  otel-collector:
#    image: otel/opentelemetry-collector:latest
#    container_name: otel-collector
#    volumes:
#      - ./config/docker/otel-collector.yaml:/etc/otel-collector.yaml
#    command: [ "--config", "/etc/otel-collector.yaml" ]
#    networks:
#      - fit-me
#
#  tempo:
#    image: grafana/tempo:latest
#    container_name: tempo
#    ports:
#      - "3200:3200"
#      - "4317:4317"
#      - "4318:4318"
#    volumes:
#      - ./config/docker/tempo.yml:/etc/tempo/tempo.yml
#      - ./tempo-data:/var/tempo
#    command:
#      - '-config.file=/etc/tempo/tempo.yml'
#    networks:
#      - fit-me
#
#
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#      - --web.enable-remote-write-receiver
#      - --enable-feature=exemplar-storage
#      - --enable-feature=native-histograms
#    volumes:
#      - ./config/docker/prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - fit-me
#
#  grafana:
#    image: grafana/grafana-oss:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./config/docker/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#      - ./config/dashboards/:/var/lib/grafana/dashboards
#
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
#    networks:
#      - fit-me

#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    container_name: jaeger
#    ports:
#      - "16686:16686"      # Jaeger UI (open in your browser)
#      - "6831:6831/udp"    # Jaeger Agent (thrift UDP)
#      - "14250:14250"  # OTLP gRPC receiver
#    networks:
#      - fit-me

#  loki:
#    container_name: loki
#    image: grafana/loki:main
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./config/docker/loki-config.yaml:/etc/loki/local-config.yaml
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - fit-me
#
#  promtail:
#    container_name: promtail
#    image: grafana/promtail:latest
#    volumes:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - ./config/docker/promtail-config.yaml:/etc/promtail/promtail.yaml
#    command: -config.file=/etc/promtail/promtail.yaml
#    networks:
#      - fit-me

#  k6-tracing:
#    image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
#    environment:
#      - ENDPOINT=otel-collector:4317
#    restart: always
#    depends_on:
#      - otel-collector

networks:
  fit-me:
