services:
  app:
    platform: linux/amd64
    container_name: fitme-dev
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - .:/app
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4318/v1/traces
    depends_on:
      - postgres
      - redis
      - otel-collector
      - prometheus
      - jaeger
    networks:
      fit-me:
  postgres:
    env_file:
      - .env
    container_name: postgres
    hostname: ${DB_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5440:5432"
    restart: on-failure
    volumes:
      - ./.data/docker-postgres:/var/lib/postgresql/data
    networks:
      - fit-me
  redis:
    env_file:
      - .env
    container_name: redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6388
    ports:
      - "6388:6388"
    expose:
      - "6388"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - fit-me
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.0.1
    platform: linux/amd64
    volumes:
      - ./config/prometheus.yml:/etc/prometheus.yml
    entrypoint:
      - /bin/prometheus
      - --config.file=/etc/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - fit-me
  jaeger:
    networks:
      fit-me:
        aliases: [spm_metrics_source]
    container_name: jaeger
    image: jaegertracing/jaeger:2.0.0
    volumes:
      - ./config/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
      - ./config/jaeger-config-spm.yaml:/etc/jaeger/jaeger-config-spm.yml
    command: [ "--config", "/etc/jaeger/jaeger-config-spm.yml" ]
    ports:
      - "16686:16686"

#  microsim:
#    networks:
#      - fit-me
#    image: yurishkuro/microsim:v0.4.1
#    command: "-d 24h -s 500ms"
#    environment:
#      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
#    depends_on:
#      - jaeger



#    networks:
#      - fit-me

#  app-dev:
#    env_file:
#      - .env
#    platform: linux/amd64
#    image: "fit-me-dev"
#    ports:
#      - "8000:8000"
#    logging:
#      driver: loki
#      options:
#        loki-url: http://localhost:3100/loki/api/v1/push
#    volumes:
#      - ./:/app
#
#  tempo:
#    image: grafana/tempo:0.7.0
#    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
#    ports:
#      - 8081:80
#    logging:
#      driver: loki
#      options:
#        loki-url: 'http://localhost:3100/api/prom/push'
#
#  tempo-query:
#    image: grafana/tempo-query:0.7.0
#    environment:
#      - BACKEND=tempo:80
#    volumes:
#      - ./etc/tempo-query.yaml:/etc/tempo-query.yaml
#    ports:
#      - "16686:16686"  # jaeger-ui
#    depends_on:
#      - tempo
#    logging:
#      driver: loki
#      options:
#        loki-url: 'http://localhost:3100/api/prom/push'
#
#  grafana:
#    image: grafana/grafana:7.3.x-exemplars
#    platform: linux/amd64
#    volumes:
#      - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    ports:
#      - "3000:3000"
#
#  loki:
#    image: grafana/loki:2.2.1
#    command: -config.file=/etc/loki/local-config.yaml
#    ports:
#      - "3100:3100"
#    logging:
#      driver: loki
#      options:
#        loki-url: 'http://localhost:3100/api/prom/push'
#


  otel-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - "8888:8888"
      - "8889:8889"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./config/otel-config.yaml:/etc/otel-collector.yaml
    command: [ "--config", "/etc/otel-collector.yaml" ]
    networks:
      - fit-me

networks:
  fit-me:
