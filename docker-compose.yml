services:
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  app:
    platform: linux/amd64
    container_name: fitme-dev
    build:
      dockerfile: Dockerfile
      context: .
      target: dev
    volumes:
      - .:/app
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=tempo:4317
      #- OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=tempo:4317

    depends_on:
      - postgres
      - redis
      - otel-collector
      - prometheus
      - grafana
    logging:
      driver: loki
      options:
        loki-url: http://localhost:3100/loki/api/v1/push
    networks:
      fit-me:

  postgres:
    env_file:
      - .env
    container_name: postgres
    hostname: ${POSTGRES_HOST}
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5440:5432"
    restart: on-failure
    volumes:
      - ./.data/docker-postgres:/var/lib/postgresql/data
    networks:
      - fit-me
  redis:
    env_file:
      - .env
    container_name: redis
    hostname: redis
    image: redis:latest
    command: redis-server --port 6388
    ports:
      - "6388:6388"
    expose:
      - "6388"
    volumes:
      - ./.data/docker-redis:/var/lib/redis/data
    networks:
      - fit-me
  tempo:
    container_name: tempo
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/docker/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    restart: unless-stopped
    depends_on:
      - init
    networks:
      fit-me:
  tempo-query:
    container_name: tempo-query
    image: grafana/tempo-query:0.7.0
    environment:
      - BACKEND=tempo:3200
    volumes:
      - ./etc/tempo-query.yaml:/etc/tempo-query.yaml
    ports:
      - "16686:16686"  # jaeger-ui
    depends_on:
      - tempo
    logging:
      driver: loki
      options:
        loki-url: 'http://localhost:3100/api/prom/push'
    networks:
      fit-me:

  # Generate fake traces...
#  k6-tracing:
#    image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
#    environment:
#      - ENDPOINT=otel-collector:4317
#    restart: always
#    depends_on:
#      - otel-collector
#    networks:
#      fit-me:

  # And put them in an OTEL collector pipeline...
  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector-helm.yaml" ]
    volumes:
      - ./config/docker/otel-collector-helm.yaml:/etc/otel-collector-helm.yaml
    ports:
      - "1888:1888"
      - "55679:55679"
    networks:
      fit-me:
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./config/docker/prometheus.yml:/etc/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      fit-me:
  grafana:
    image: grafana/grafana:11.0.0
    volumes:
      - ./config/docker/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      fit-me:
  loki:
    image: grafana/loki:main
    ports:
      - "3100:3100"
    volumes:
      - ./config/docker/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - fit-me

# DONT NEED THIS
#  minio:
#    container_name: minio
#    image: minio/minio
#    entrypoint: [ "" ]
#    command: [ "sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data" ]
#    environment:
#      - MINIO_ROOT_USER=mimir
#      - MINIO_ROOT_PASSWORD=supersecret
#    ports:
#      - "9000:9000"
#    networks:
#      - fit-me
#  mimir:
#    container_name: mimir
#    image: grafana/mimir:latest
#    command: [ "-config.file=/etc/mimir.yaml" ]
#    hostname: mimir
#    volumes:
#      - ./config/docker/mimir/mimir.yaml:/etc/mimir.yaml
#      - ./config/docker/mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
#  jaeger:
#    networks:
#      fit-me:
#        aliases: [spm_metrics_source]
#    container_name: jaeger
#    image: jaegertracing/jaeger:2.0.0
#    volumes:
#      - ./config/docker/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
#      - ./config/docker/jaeger/jaeger-config-spm.yaml:/etc/jaeger/jaeger-config-spm.yml
#    command: [ "--config", "/etc/jaeger/jaeger-config-spm.yml" ]
#    ports:
#      - "16686:16686"
networks:
  fit-me:
